package com.spirit.koil.render;

import com.spirit.Main;
import net.fabricmc.fabric.api.client.keybinding.v1.KeyBindingHelper;
import net.fabricmc.fabric.api.event.lifecycle.v1.ServerTickEvents;
import net.minecraft.client.MinecraftClient;
import net.minecraft.client.option.KeyBinding;
import net.minecraft.client.util.InputUtil;
import net.minecraft.entity.player.PlayerEntity;
import net.minecraft.server.MinecraftServer;
import org.lwjgl.glfw.GLFW;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;

public class IrisConfigModifier {

    private static final String CONFIG_PATH = "config/iris.properties";

    public static void haveInitializeClient() {
        ServerTickEvents.END_SERVER_TICK.register(IrisConfigModifier::onServerTick);

        Main.LOGGER.info("IRIS CONFIG CHANGE FILE IS APPEARING WHO KNOWS IF IT'S WORKING");
    }

    private static void onServerTick(MinecraftServer server) {
        server.getPlayerManager().getPlayerList().forEach(IrisConfigModifier::checkPlayerDimension);
    }

    private static void checkPlayerDimension(PlayerEntity player) {
        if (player.getEntityWorld().getDimension().hasCeiling()) {
            modifyConfig();
            simulateKeyPress();

            reloadGame();
        }
    }

    private static final InputUtil.Key toggleShadersKeybind = KeyBindingHelper.getBoundKeyOf(
            new KeyBinding("iris.keybind.toggleShaders", GLFW.GLFW_KEY_K, "iris.keybinds")
    );

    private static void simulateKeyPress() {
        KeyBinding.setKeyPressed(IrisConfigModifier.toggleShadersKeybind.getCategory().createFromCode(GLFW.GLFW_KEY_K), true);
    }

    private static void modifyConfig() {
        try {
            Path configPath = getConfigPath();
            String content = new String(Files.readAllBytes(configPath));
            content = content.replaceAll("(?m)^enableShaders=(true|false)$", "enableShaders=" + true);

            Files.write(configPath, content.getBytes(), StandardOpenOption.TRUNCATE_EXISTING);
        } catch (IOException e) {
            e.printStackTrace(); // Handle more gracefully in a production environment
        }
    }

    private static Path getConfigPath() throws IOException {
        Path configPath = Paths.get(CONFIG_PATH);

        // Create the config file if it doesn't exist
        if (!Files.exists(configPath)) {
            Files.createDirectories(configPath.getParent());
            Files.createFile(configPath);
            Files.write(configPath, "# Auto-generated by IrisConfigModifier\nenableShaders=false".getBytes());
        }

        return configPath;
    }

    private static boolean hasReloaded = false;

    private static void reloadGame() {
        if (!hasReloaded) {
            try {
                MinecraftClient.getInstance().reloadResourcesConcurrently().get();
            } catch (Exception e) {
                // Log the exception or error
                Main.LOGGER.error("Error during resource reload:", e);
            } finally {
                hasReloaded = true;
            }
        }
    }
}
